Aggregation Operation
-----------------------------------------
db.collection.aggregate([
  { stage1 },
  { stage2 },
  ...
])
প্রতিটি { stage } মানে হলো একটা কাজের ধাপ (pipeline stage)। যেমন: $match, $group, $sort, ইত্যাদি।



 	$match - ডেটা ফিল্টার (like find())
------------------------------------------------------------------
//যাদের বয়স ২৫ এর বেশি, শুধু তাদেরকে নিয়ে কাজ করবো।
db.users.aggregate([
  { $match: { age: { $gt: 25 } } }
])
 	-----x--------


	$group — গ্রুপ করে হিসাব
------------------------------------------------------------------------
db.users.aggregate([
  {
    $group: {
      _id: "$city",
      totalUsers: { $sum: 1 }
    }
  }
])
//প্রতিটি city অনুযায়ী কতজন ইউজার আছে, সেটা দেখাবে।
	ব্যাখ্যা:
    _id: "$city" ➤ কোন ফিল্ড দিয়ে গ্রুপ করবে

     $sum: 1 ➤ প্রতি ইউজারকে ১ করে ধরবে = কাউন্ট হবে
     -------x-------------------



	$avg — গড় হিসাব
----------------------------------------------------------
db.users.aggregate([
  {
    $group: {
      _id: "$city",
      avgAge: { $avg: "$age" }
    }
  }
])
//প্রতিটি শহরের ইউজারদের গড় বয়স।
 ---------x--------



	$sum, $min, $max
------------------------------------------------------
db.orders.aggregate([
  {
    $group: {
      _id: "$customerId",
      totalAmount: { $sum: "$amount" },
      maxAmount: { $max: "$amount" },
      minAmount: { $min: "$amount" }
    }
  }
])
//প্রতিটি কাস্টমার কত টাকা খরচ করেছে, সর্বোচ্চ-সর্বনিম্ন কত।


db.users.aggregate([
  { $match: { age: { $gte: 18 } } },
  { $group: {
      _id: "$city",
      count: { $sum: 1 },
      avgAge: { $avg: "$age" }
  }},
  { $sort: { count: -1 } }
])
কাজের ধারাবাহিকতা:
$match ➤ ১৮+ বয়স ফিল্টার করো
$group ➤ শহরভিত্তিক ইউজার কটা, গড় বয়স কত
$sort ➤ বেশি ইউজার আছে এমন শহর আগে দেখাও



Aggregate
----------------------------------------------
Commands

db.<collection>.aggregate([{$match:{field:"value"}}])
db.<collection>.aggregate([{$match:{field:"value"}},{
  $group:{
	  _id : <expression>, //group key
	  <field1>:{<accumulator1> : <expression1>},
	  .......
	}
}])
-----
db.students.aggregate([{$match:{status:"pending"}}])
//to count 
db.students.aggregate([{$match:{status:"pending"}},{
  $group:{
	  _id : null, //group key
	  count:{$count :{}},
	}
}])

Example:
db.students.aggregate([{$match:{status:"pending"}}])
-----

//to count 
db.students.aggregate([{$match:{status:"pending"}},{
  $group:{
	  _id : null, //group key
	  count:{$count :{}},
	}
}])



example- 2
----------
db.sales.aggregate([{
  $group:{
	  _id : "$item", //group key
	  totalSaleAmount:{$sum :{$multiply:["$price","$quantity"]}},
	}
}
,{$match:{totalSaleAmount:{$gte : 100}}}
])






	$lookup → Collection Join (like SQL JOIN)
----------------------------------------------------------------------
ধরো orders আর users নামে ২টা collection আছে।
orders.userId → users._id এর সাথে match করবে।

db.orders.aggregate([
  {
    $lookup: {
      from: "users",
      localField: "userId",
      foreignField: "_id",
      as: "user"
    }
  }
])

প্রত্যেক order-এর সাথে তার user info আসবে (array আকারে)
	--------- x--------------


	$facet → একই কোয়েরিতে multiple result
------------------------------------------------------
db.users.aggregate([
  {
    $facet: {
      totalUsers: [ { $count: "count" } ],
      byCity: [
        { $group: { _id: "$city", count: { $sum: 1 } } }
      ]
    }
  }
])

দুইটা রিপোর্ট একসাথে পাবে: total count + শহর অনুযায়ী হিসাব
	-----x------


	$bucket → Range-based Grouping
----------------------------------------------------------

db.users.aggregate([
  {
    $bucket: {
      groupBy: "$age",
      boundaries: [0, 18, 30, 50, 100],
      default: "Others",
      output: {
        count: { $sum: 1 }
      }
    }
  }
])
বয়সকে গ্রুপ করবে রেঞ্জ অনুযায়ী: 0–18, 18–30, ...
-----x---------


	$cond (if-else), $ifNull, $toDate — Smart Data Handling
--------------------------------------------------------------------
db.users.aggregate([
  {
    $project: {
      status: {
        $cond: {
          if: { $gte: ["$age", 18] },
          then: "Adult",
          else: "Child"
        }
      },
      createdAt: { $toDate: "$createdAtStr" },
      city: { $ifNull: ["$city", "Unknown"] }
    }
  }
])

ব্যাখ্যা:

age দেখে status ঠিক করবে (Adult/Child)

createdAtStr কে Date বানাবে

যদি city না থাকে তাহলে "Unknown" হবে



	$merge
------------------------------------------
Final result অন্য collection-এ insert/update করে।

db.sales.aggregate([
  { ... },
  { $merge: "sales_report" }
])



	$out
------------------------------------------------------
Aggregation result কে একটা নতুন collection-এ লিখে দেয়।

db.users.aggregate([
  { ... },
  { $out: "users_summary" }
])



	$count (shortcut to count)
--------------------------------------------------
db.users.aggregate([
  { $match: { age: { $gte: 18 } } },
  { $count: "totalAdults" }
])




	$replaceRoot
------------------------------------------------
বর্তমান ডকুমেন্টের root পরিবর্তন করে দেয়।


	$map, $filter, $reduce
----------------------------------------------------
{
  $project: {
    productNames: {
      $map: {
        input: "$products",
        as: "prod",
        in: "$$prod.name"
      }
    }
  }
}



	$set = $addFields, এবং $unset
--------------------------------------------------

{ $set: { ageGroup: "Young" } }
{ $unset: "tempField" }


	$sortByCount
--------------------------------------------------
গ্রুপ করে count করে, sort করেও দেয় একদম short version এ।
db.users.aggregate([
  { $sortByCount: "$city" }
])






















