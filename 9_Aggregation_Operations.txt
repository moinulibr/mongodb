Aggregation Operation
-----------------------------------------
db.collection.aggregate([
  { stage1 },
  { stage2 },
  ...
])
প্রতিটি { stage } মানে হলো একটা কাজের ধাপ (pipeline stage)। যেমন: $match, $group, $sort, ইত্যাদি।



 	$match - ডেটা ফিল্টার (like find())
------------------------------------------------------------------
//যাদের বয়স ২৫ এর বেশি, শুধু তাদেরকে নিয়ে কাজ করবো।
db.users.aggregate([
  { $match: { age: { $gt: 25 } } }
])
 	-----x--------


	$group — গ্রুপ করে হিসাব
------------------------------------------------------------------------
db.users.aggregate([
  {
    $group: {
      _id: "$city",
      totalUsers: { $sum: 1 }
    }
  }
])
//প্রতিটি city অনুযায়ী কতজন ইউজার আছে, সেটা দেখাবে।
	ব্যাখ্যা:
    _id: "$city" ➤ কোন ফিল্ড দিয়ে গ্রুপ করবে

     $sum: 1 ➤ প্রতি ইউজারকে ১ করে ধরবে = কাউন্ট হবে
     -------x-------------------



	$avg — গড় হিসাব
----------------------------------------------------------
db.users.aggregate([
  {
    $group: {
      _id: "$city",
      avgAge: { $avg: "$age" }
    }
  }
])
//প্রতিটি শহরের ইউজারদের গড় বয়স।
 ---------x--------



	$sum, $min, $max
------------------------------------------------------
db.orders.aggregate([
  {
    $group: {
      _id: "$customerId",
      totalAmount: { $sum: "$amount" },
      maxAmount: { $max: "$amount" },
      minAmount: { $min: "$amount" }
    }
  }
])
//প্রতিটি কাস্টমার কত টাকা খরচ করেছে, সর্বোচ্চ-সর্বনিম্ন কত।


db.users.aggregate([
  { $match: { age: { $gte: 18 } } },
  { $group: {
      _id: "$city",
      count: { $sum: 1 },
      avgAge: { $avg: "$age" }
  }},
  { $sort: { count: -1 } }
])
কাজের ধারাবাহিকতা:
$match ➤ ১৮+ বয়স ফিল্টার করো
$group ➤ শহরভিত্তিক ইউজার কটা, গড় বয়স কত
$sort ➤ বেশি ইউজার আছে এমন শহর আগে দেখাও



Aggregate
----------------------------------------------
Commands

db.<collection>.aggregate([{$match:{field:"value"}}])
db.<collection>.aggregate([{$match:{field:"value"}},{
  $group:{
	  _id : <expression>, //group key
	  <field1>:{<accumulator1> : <expression1>},
	  .......
	}
}])
-----
db.students.aggregate([{$match:{status:"pending"}}])
//to count 
db.students.aggregate([{$match:{status:"pending"}},{
  $group:{
	  _id : null, //group key
	  count:{$count :{}},
	}
}])

Example:
db.students.aggregate([{$match:{status:"pending"}}])
-----

//to count 
db.students.aggregate([{$match:{status:"pending"}},{
  $group:{
	  _id : null, //group key
	  count:{$count :{}},
	}
}])



example- 2
----------
db.sales.aggregate([{
  $group:{
	  _id : "$item", //group key
	  totalSaleAmount:{$sum :{$multiply:["$price","$quantity"]}},
	}
}
,{$match:{totalSaleAmount:{$gte : 100}}}
])













